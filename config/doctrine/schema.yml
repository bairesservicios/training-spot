# place stands for the swimming pool, a room in a gym or even the square
Place:
  columns:
    place_name: { type: string(50), notnull: true, unique:true }
    maximum_capacity: { type: integer, default: 0 }

ClassType:
  columns:
    type_name: { type: string(50), notnull: true, unique:true }

AbstractPerson:
  columns:
    first_name: { type: string(255), notnull: true }
    last_name: { type: string(255), notnull: true }
    birthday: { type: date, notnull: true }
    email: { type: string(255) }
    address: { type: string(255) }
    phones: { type: string(255) }

Client:
  inheritance:
    extends: AbstractPerson
  attributes:
    export: all
    validate: true
      
Coach:
  inheritance:
    extends: AbstractPerson
  attributes:
    export: all
    validate: true

AbstractClass:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    place_id: { type: integer }
    class_type_id: { type: integer }
    day_of_the_week: { type: enum,  values: [0,1,2,3,4,5,6], default: 0 }
    start_hour: { type: enum, values: [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], default: 7}
    end_hour: { type: enum, values: [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], default: 7}
    start_min: { type: enum, values: [0,5,10,15,20,25,30,35,40,45,50,55], default: 0 }
    end_min: { type: enum, values: [0,5,10,15,20,25,30,35,40,45,50,55], default: 0 }
  relations:
    Place:
      foreignAlias: ClassesForPlace
    ClassType:
      foreignAlias: ClassesofType    
    Clients:
      foreignAlias: Classes
      class: Client
      refClass: ClassPerClient
    Coaches:
      foreignAlias: Classes
      class: Coach
      refClass: ClassPerCoach

ClassPerClient:
  columns:
    client_id: { type:integer, primary: true }
    abstract_class_id: { type:integer, primary: true }
  relations:
    Client: { foreignAlias: ClassesPerClient }
    AbstractClass: { foreignAlias: ClassesPerClient }

ClassPerCoach:
  columns:
    coach_id: { type:integer, primary: true }
    abstract_class_id: { type:integer, primary: true }
  relations:
    Coach: { foreignAlias: ClassesPerCoach }
    AbstractClass: { foreignAlias: ClassesPerCoach }

MedicalRevision:
  columns:
    client_id: { type: integer }
    date: { type: date, notnull: true }
    passed: { type: boolean, default: true }
    comments: { type: string(255) }
  relations:
    Client: { foreignAlias: MedicalRevisions }
    
MembershipFee:
  columns:
    client_id: { type: integer }
    date: { type: date, notnull: true }
    amount: { type: float, default: 0 }
  relations:
    Client: { foreignAlias: MembershipFees }
    